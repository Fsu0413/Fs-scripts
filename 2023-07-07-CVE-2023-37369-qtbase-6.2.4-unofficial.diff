diff -ru qtbase__/src/corelib/serialization/qxmlstream.cpp qtbase/src/corelib/serialization/qxmlstream.cpp
--- qtbase__/src/corelib/serialization/qxmlstream.cpp	2023-07-09 12:14:13.301671600 +0800
+++ qtbase/src/corelib/serialization/qxmlstream.cpp	2023-07-09 12:35:09.291910900 +0800
@@ -1292,7 +1292,9 @@
     return n;
 }
 
-inline int QXmlStreamReaderPrivate::fastScanName(Value *val)
+// Fast scan an XML attribute name (e.g. "xml:lang").
+inline QXmlStreamReaderPrivate::FastScanNameResult
+QXmlStreamReaderPrivate::fastScanName(Value *val)
 {
     int n = 0;
     uint c;
@@ -1300,7 +1302,8 @@
         if (n >= 4096) {
             // This is too long to be a sensible name, and
             // can exhaust memory
-            return 0;
+            raiseNamePrefixTooLongError();
+            return {};
         }
         switch (c) {
         case '\n':
@@ -1334,18 +1337,18 @@
                 putChar(':');
                 --n;
             }
-            return n;
+            return FastScanNameResult(n);
         case ':':
             if (val) {
                 if (val->prefix == 0) {
                     val->prefix = n + 2;
                 } else { // only one colon allowed according to the namespace spec.
                     putChar(c);
-                    return n;
+                    return FastScanNameResult(n);
                 }
             } else {
                 putChar(c);
-                return n;
+                return FastScanNameResult(n);
             }
             Q_FALLTHROUGH();
         default:
@@ -1359,7 +1362,7 @@
     int pos = textBuffer.size() - n;
     putString(textBuffer, pos);
     textBuffer.resize(pos);
-    return 0;
+    return FastScanNameResult(0);
 }
 
 enum NameChar { NameBeginning, NameNotBeginning, NotName };
@@ -1840,6 +1843,14 @@
     raiseError(QXmlStreamReader::NotWellFormedError, message);
 }
 
+void QXmlStreamReaderPrivate::raiseNamePrefixTooLongError()
+{
+    // TODO: add a ImplementationLimitsExceededError and use it instead
+    raiseError(QXmlStreamReader::NotWellFormedError,
+               QXmlStream::tr("Length of XML attribute name exceeds implemnetation limits (4KiB "
+                              "characters)."));
+}
+
 void QXmlStreamReaderPrivate::parseError()
 {
 
diff -ru qtbase__/src/corelib/serialization/qxmlstream.g qtbase/src/corelib/serialization/qxmlstream.g
--- qtbase__/src/corelib/serialization/qxmlstream.g	2023-07-09 12:11:03.215930700 +0800
+++ qtbase/src/corelib/serialization/qxmlstream.g	2023-07-09 12:35:09.303660000 +0800
@@ -1489,7 +1489,11 @@
 /.
         case $rule_number: {
             Value &val = sym(1);
-            val.len += fastScanName(&val);
+            if (auto res = fastScanName(&val))
+                val.len += *res;
+            else
+                return false;
+
             if (atEnd) {
                 resume($rule_number);
                 return false;
@@ -1500,7 +1504,11 @@
 name ::= LETTER;
 /.
         case $rule_number:
-            sym(1).len += fastScanName();
+            if (auto res = fastScanName())
+                sym(1).len += *res;
+            else
+                return false;
+
             if (atEnd) {
                 resume($rule_number);
                 return false;
diff -ru qtbase__/src/corelib/serialization/qxmlstream_p.h qtbase/src/corelib/serialization/qxmlstream_p.h
--- qtbase__/src/corelib/serialization/qxmlstream_p.h	2023-07-09 12:11:18.187661000 +0800
+++ qtbase/src/corelib/serialization/qxmlstream_p.h	2023-07-09 12:35:09.316680100 +0800
@@ -71,7 +71,7 @@
 
     constexpr XmlStringRef() = default;
     constexpr inline XmlStringRef(const QString *string, int pos, int length)
-        : m_string(string), m_pos(pos), m_size(length)
+        : m_string(string), m_pos(pos), m_size((Q_ASSERT(length >= 0), length))
     {
     }
     XmlStringRef(const QString *string)
@@ -503,7 +503,16 @@
     int fastScanLiteralContent();
     int fastScanSpace();
     int fastScanContentCharList();
-    int fastScanName(Value *val = nullptr);
+
+    struct FastScanNameResult {
+        FastScanNameResult() : ok(false) {}
+        explicit FastScanNameResult(int len) : addToLen(len), ok(true) { }
+        operator bool() { return ok; }
+        int operator*() { Q_ASSERT(ok); return addToLen; }
+        int addToLen;
+        bool ok;
+    };
+    FastScanNameResult fastScanName(Value *val = nullptr);
     inline int fastScanNMTOKEN();
 
 
@@ -512,6 +521,7 @@
 
     void raiseError(QXmlStreamReader::Error error, const QString& message = QString());
     void raiseWellFormedError(const QString &message);
+    void raiseNamePrefixTooLongError();
 
     QXmlStreamEntityResolver *entityResolver;
 
diff -ru qtbase__/src/corelib/serialization/qxmlstreamparser_p.h qtbase/src/corelib/serialization/qxmlstreamparser_p.h
--- qtbase__/src/corelib/serialization/qxmlstreamparser_p.h	2023-07-09 12:12:15.837780800 +0800
+++ qtbase/src/corelib/serialization/qxmlstreamparser_p.h	2023-07-09 12:38:57.347654200 +0800
@@ -983,7 +983,11 @@
 
         case 262: {
             Value &val = sym(1);
-            val.len += fastScanName(&val);
+            if (auto res = fastScanName(&val))
+                val.len += *res;
+            else
+                return false;
+
             if (atEnd) {
                 resume(262);
                 return false;
@@ -991,7 +995,11 @@
         } break;
 
         case 263:
-            sym(1).len += fastScanName();
+            if (auto res = fastScanName())
+                sym(1).len += *res;
+            else
+                return false;
+
             if (atEnd) {
                 resume(263);
                 return false;
